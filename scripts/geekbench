#!/usr/local/munkireport/munkireport-python2

import subprocess
import os
import plistlib
import sys
import time;

def check_run_time(cache_file):

    # Get current time
    current_time = int(time.time())

    # Check if cache plist exists
    try:
        out = plistlib.readPlist(cache_file)
    except Exception:
        out = {}
        last_run = str(current_time)

    # Check if key exists
    if 'last_run' in out:
        # Only run if it has been more than a week
        if current_time > int(out["last_run"])+64000:
            last_run = str(int(out["last_run"])+64000)
        else:
            exit(0)
    else:
        last_run = str(current_time)

    return last_run

def get_gpu_info():
    '''Uses system profiler to get GPU name for this machine.'''
    cmd = ['/usr/sbin/system_profiler', 'SPDisplaysDataType', '-xml']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    try:
        plist = plistlib.readPlistFromString(output)
        # system_profiler xml is an array
        sp_dict = plist[0]
        items = sp_dict['_items']
        return items
    except Exception:
        return {}

def flatten_gpu_info(array):
    '''Un-nest GPUs, return array with objects with relevant keys'''
    out = []
    gpu_count = 0
    for obj in array:
        device = {'model': ''}
        for item in obj:
            if item == '_items':
                out = out + flatten_gpu_info(obj['_items'])
            elif item == 'sppci_model':
                device['model'] = obj[item]
                if len(array) == gpu_count:
                    break
                else:
                    gpu_count = gpu_count + 1
                    continue
    return device

def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z   

def main():
    """Main"""

    # Set the encoding
    reload(sys)
    sys.setdefaultencoding('utf8')

    # Get results
    result = dict()
    info = get_gpu_info()
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    time_check = {'last_run':check_run_time(os.path.join(cachedir, 'geekbench.plist'))}
    result = merge_two_dicts(flatten_gpu_info(info),time_check)

    # Write Geekbench cache file
    output_plist = os.path.join(cachedir, 'geekbench.plist')
    plistlib.writePlist(result, output_plist)
    #print plistlib.writePlistToString(result)

if __name__ == "__main__":
    main()

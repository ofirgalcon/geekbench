#!/bin/bash

CWD=$(dirname $0)
CACHEDIR="$CWD/cache"
geekbenchStats="$CACHEDIR/geekbench.plist"

# Skip manual check
if [ "$1" = 'manualcheck' ]; then
	echo 'Manual check: skipping'
	exit 0
fi

# Create cache dir if it does not exist
mkdir -p "${CACHEDIR}"

# Business logic goes here

geekbenchLastRun="$(defaults read /usr/local/munki/preflight.d/cache/geekbench.plist LastRun)" > /dev/null 2>&1 
TimeNow=`date +%s`
TimeSince=$((TimeNow-geekbenchLastRun))

if (( $TimeSince > 860000 )) ; then

	#### DEBUG
	#geekbenchStats="/Users/ofir/Desktop/geekbench.plist"

	srcFile="/tmp/mr-benchmarks-raw"
	dstFile="/tmp/mr-benchmarks"

	curl -s "https://browser.geekbench.com/mac-benchmarks.json" > $srcFile.json
	cp $srcFile.json $dstFile.json
	
	sed -i -e 's/\"id\"\://g'  $dstFile.json
	sed -i -e 's/\"name\"\://g'  $dstFile.json
	sed -i -e 's/\"description\"\://g'  $dstFile.json
	sed -i -e 's/\"samples\"\://g'  $dstFile.json
	sed -i -e 's/\"score\"\://g'  $dstFile.json
	sed -i -e 's/\"multicore_score\"\://g'  $dstFile.json
	sed -i -e 's/\"icon\"\://g'  $dstFile.json
	sed -i -e 's/\"family\"\://g'  $dstFile.json
	sed -i -e 's/\"//g'  $dstFile.json
	sed -i -e 's/\n//g'  $dstFile.json
	sed -i -e 's/devices\://g'  $dstFile.json
	sed -i -e 's/\[//g'  $dstFile.json
	sed -i -e 's/\]//g'  $dstFile.json
	cat $dstFile.json | xargs | sed "s/\n //g" > $dstFile-a.csv
	cat $dstFile-a.csv | xargs | sed "s/[}]/\ /g" | sed "s/\, /\,/g" > $dstFile-b.csv
	cat $dstFile-b.csv | tr "{" "\n" > $dstFile.csv
	
	cpuname="$(sysctl -n machdep.cpu.brand_string)"
	cpuname="${cpuname//Intel(R)/}"
	cpuname="${cpuname//Core(TM)2/}"
	cpuname="${cpuname//CPU/}"
	cpuname="${cpuname//Xeon(R)/}"
	cpuname="${cpuname//Duo/}"
	cpuname="${cpuname//Core(TM)/}"
	cpuname="$(echo $cpuname | awk -F "@" '{print $1}')"
	cpuname="${cpuname%"${cpuname##*[![:space:]]}"}"   
	cpuspeed="$(sysctl -n machdep.cpu.brand_string | awk -F "@" '{print $2}')"
	cleanspeed=$(printf "%.1f\n" ${cpuspeed::+5})
	cpu="$cpuname @ $cleanspeed"
	model="$(system_profiler SPHardwareDataType | grep "Model Name" | awk -F ": " '{print $2}')"
	curModel="$(cat $dstFile.csv)"
	score=$(echo "$curModel" | grep "$cpu" | grep "$model" | awk -F "," '{print $5}')
	multiscore=$(echo "$curModel" | grep "$cpu" | grep "$model" | awk -F "," '{print $6}')
	model_name="$(echo "$curModel" | grep "$cpu" | grep "$model" | awk -F "," '{print $2}')"
	description="$(echo "$curModel" | grep "$cpu" | grep "$model" | awk -F "," '{print $3}')"
	samples=$(echo "$curModel" | grep "$cpu" | grep "$model" | awk -F "," '{print $4}')

	defaults write $geekbenchStats score -int $score
	defaults write $geekbenchStats multiscore -int $multiscore
	defaults write $geekbenchStats model_name "\"$model_name\""
	defaults write $geekbenchStats description "\"$description\""
	defaults write $geekbenchStats samples -int $samples
	defaults write $geekbenchStats LastRun $(date +%s)
	rm $dstFile*

fi
	

# Selfdestruct
# rm -f "${0}"
